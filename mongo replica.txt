http://gpd.sip.ucm.es/rafa/docencia/nosql/Replicas.html

mongod --port 27001 --replSet replicaTorneoIB --dbpath /data1 --oplogSize 115
mongod --port 27002 --replSet replicaTorneoIB --dbpath /data2 --oplogSize 115
mongod --port 27003 --replSet replicaTorneoIB --dbpath /data3 --oplogSize 115
mongod --port 27004 --replSet replicaTorneoIB --dbpath /data4 --oplogSize 115
mongod --port 27005 --replSet replicaTorneoIB --dbpath /data5 --oplogSize 115

db.shutdownServer()

use TorneoDeportivoIBERO


mongo --port 27001
mongo --port 27002
mongo --port 27003

config = {
              _id: "replicaTorneoIB",
              members: [ 
              {_id:0, host:"127.0.0.1:27001" },
              {_id:1, host:"127.0.0.1:27002" },
              {_id:2, host:"127.0.0.1:27003" },]}
Agregar arbitro 
 rs.addArb("127.0.0.1:27005")

 usar solo para dejar server como de de backup {_id:3, host:"127.0.0.1:27004", priority:0, slaveDelay:60 }
 Ahora ya se puede crear el conjunto réplica con:

rs.initiate(config)
rs.status()

En cada momento podemos saber si estamos en el shell del master con
db.isMaster()

1) Si es un secundario; desde el primario tecleamos:

var a = connect("127.0.0.1:27001/admin");
a.shutdownServer()
rs.status()
    
var a = connect("127.0.0.1:27002/admin");
a.shutdownServer()
rs.status()
var a = connect("127.0.0.1:27003/admin");
a.shutdownServer()
rs.status()

El secundario seguirá estando en el conjunto réplica a efectos "administrativos" (es decir rs.status lo mostrará), pero sin conexión. En particular su proceso mongod habrá desaparecido. Esto es útil para labores de mantenimiento, si luego se planea vlver a activarlo, haciendo por ejemplo:

mongod --fork --logpath a.log --smallfiles --oplogSize 50 --port 27001
       --dbpath data1 --replSet replicaNoSQL 1

Si en lugar de esto queremos quitarlo definitivamente podemos añadir:

rs.remove("puck:27001")
cambiando el nombre "puck:27001" por el identificador del secundario a retirar.


2) Si es un primario antes hay que "retirarlo" como primario.
Para ello desde la consola del primario hacemos

rs.stepDown()
Tras este paso atrás, podemos ir a una consola de mongo db y teclear:

rs.remove("puck:27001")
con "puck:27001" sustituido por el nombre del ex-primario.

El valor priority:0 indica que este secundario nunca podrá ser primario.Priority debe ser un número real entre 0 y 1000.
El slaveDelay:60 indica que tardará 60 segundos en procesar los datos que le lleguen.
Hay otras opciones además de estas dos, por ejemplo "arbiterOnly":true indica que ese miembro de la réplica será solo árbitro, no contendrá datos.

Nuevos servidores

Según nuestra aplicación crezca, o simplemente debido a que los servidores pueden irse estropeando, tendremos que ir añadiendo nuevos elementos a la réplica. No es necesario parar y volver a iniciar el conjunto, se puede añadir un nuevo elemento directamente. Para ello:

- Se creará una nueva carpeta de datos
- Se iniciará una nueva instancia de mongod con el nombre de la réplica, el directorio de datos y un nuevo número de puerto
- Desde el primario se hará rs.add(nombre)
Por ejemplo.

rs.add("puck:27002")

Acceso a datos

external image diamond.gifObservación Desde un secundario por defecto no se pueden hacer consultas. para habilitar las consultas debemos habilitarlo con:
replica:SECONDARY> rs.slaveOk()

// comando actividad 1 y 2
show dbs:  lista las bases de datos existentes
db: obtiene el nombre de la base de datos actual
use: crea una nueva base de datos: use TorneoDeportivo
show collections: obtiene todos las collections “tablas”
db.dropDatabase() borra la base de datos actual

db.Deportistas.insert({nombre:"Mauricio",numero:1,posision:"DC",documento:"A1234567", fechaTex:"2022-01-16",idEquipo:"1234567890987654"})

db.createCollection("Arbitros")
db.Arbitros.insert({nombre:"Jhonny",numero:1,documento:"A1234567"})

db.createCollection("Entrenadores")
db.Entrenadores.insert({nombre:"Juan",documento:"A1234567",fechaTex:"2022-01-16",idEquipo: "1234567890987654"})

db.createCollection("Equipos")
db.Equipos.insert({nombreEquipo:"Colombia",fechaTex:"2022-01-16"})

db.createCollection("Temporadas")
db.Temporadas.insert({temporada:"Ibero 2022",fechaTex:"2022-01-16",fechaInicio:"2022-01-16", fechaFin:"2022-05-16", idEquipo: "1234567890987654"})

db.EncuentrosDeportivos.find({_id:"61e313e89746b6c6b700ad3c"})


